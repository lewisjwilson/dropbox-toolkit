{
  "version": 3,
  "sources": ["../../vuetify/src/components/VInfiniteScroll/VInfiniteScroll.tsx"],
  "sourcesContent": ["// Styles\nimport './VInfiniteScroll.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useLocale } from '@/composables/locale'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, nextTick, onMounted, ref, shallowRef, watch } from 'vue'\nimport { convertToUnit, defineComponent, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type InfiniteScrollSide = 'start' | 'end' | 'both'\nexport type InfiniteScrollStatus = 'ok' | 'empty' | 'loading' | 'error'\n\ntype InfiniteScrollSlot = {\n  side: InfiniteScrollSide\n  props: Record<string, any>\n}\n\ntype VInfiniteScrollSlots = {\n  default: never\n  loading: InfiniteScrollSlot\n  error: InfiniteScrollSlot\n  empty: InfiniteScrollSlot\n  'load-more': InfiniteScrollSlot\n}\n\nexport const makeVInfiniteScrollProps = propsFactory({\n  color: String,\n  direction: {\n    type: String as PropType<'vertical' | 'horizontal'>,\n    default: 'vertical',\n    validator: (v: any) => ['vertical', 'horizontal'].includes(v),\n  },\n  side: {\n    type: String as PropType<InfiniteScrollSide>,\n    default: 'end',\n    validator: (v: any) => ['start', 'end', 'both'].includes(v),\n  },\n  mode: {\n    type: String as PropType<'intersect' | 'manual'>,\n    default: 'intersect',\n    validator: (v: any) => ['intersect', 'manual'].includes(v),\n  },\n  margin: [Number, String],\n  loadMoreText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.loadMore',\n  },\n  emptyText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.empty',\n  },\n\n  ...makeDimensionProps(),\n  ...makeTagProps(),\n}, 'VInfiniteScroll')\n\nexport const VInfiniteScrollIntersect = defineComponent({\n  name: 'VInfiniteScrollIntersect',\n\n  props: {\n    side: {\n      type: String as PropType<InfiniteScrollSide>,\n      required: true,\n    },\n    rootRef: null,\n    rootMargin: String,\n  },\n\n  emits: {\n    intersect: (side: InfiniteScrollSide, isIntersecting: boolean) => true,\n  },\n\n  setup (props, { emit }) {\n    const { intersectionRef, isIntersecting } = useIntersectionObserver(entries => {\n    }, props.rootMargin ? {\n      rootMargin: props.rootMargin,\n    } : undefined)\n\n    watch(isIntersecting, async val => {\n      emit('intersect', props.side, val)\n    })\n\n    useRender(() => (\n      <div class=\"v-infinite-scroll-intersect\" ref={ intersectionRef }>&nbsp;</div>\n    ))\n\n    return {}\n  },\n})\n\nexport const VInfiniteScroll = genericComponent<VInfiniteScrollSlots>()({\n  name: 'VInfiniteScroll',\n\n  props: makeVInfiniteScrollProps(),\n\n  emits: {\n    load: (options: { side: InfiniteScrollSide, done: (status: InfiniteScrollStatus) => void }) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const rootEl = ref<HTMLDivElement>()\n    const startStatus = shallowRef<InfiniteScrollStatus>('ok')\n    const endStatus = shallowRef<InfiniteScrollStatus>('ok')\n    const margin = computed(() => convertToUnit(props.margin))\n    const isIntersecting = shallowRef(false)\n\n    function setScrollAmount (amount: number) {\n      if (!rootEl.value) return\n\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft'\n      rootEl.value[property] = amount\n    }\n\n    function getScrollAmount () {\n      if (!rootEl.value) return 0\n\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft'\n      return rootEl.value[property]\n    }\n\n    function getScrollSize () {\n      if (!rootEl.value) return 0\n\n      const property = props.direction === 'vertical' ? 'scrollHeight' : 'scrollWidth'\n      return rootEl.value[property]\n    }\n\n    function getContainerSize () {\n      if (!rootEl.value) return 0\n\n      const property = props.direction === 'vertical' ? 'clientHeight' : 'clientWidth'\n      return rootEl.value[property]\n    }\n\n    onMounted(() => {\n      if (!rootEl.value) return\n\n      if (props.side === 'start') {\n        setScrollAmount(getScrollSize())\n      } else if (props.side === 'both') {\n        setScrollAmount(getScrollSize() / 2 - getContainerSize() / 2)\n      }\n    })\n\n    function setStatus (side: InfiniteScrollSide, status: InfiniteScrollStatus) {\n      if (side === 'start') {\n        startStatus.value = status\n      } else if (side === 'end') {\n        endStatus.value = status\n      }\n    }\n\n    function getStatus (side: string) {\n      return side === 'start' ? startStatus.value : endStatus.value\n    }\n\n    let previousScrollSize = 0\n    function handleIntersect (side: InfiniteScrollSide, _isIntersecting: boolean) {\n      isIntersecting.value = _isIntersecting\n      if (isIntersecting.value) {\n        intersecting(side)\n      }\n    }\n\n    function intersecting (side: InfiniteScrollSide) {\n      if (props.mode !== 'manual' && !isIntersecting.value) return\n\n      const status = getStatus(side)\n      if (!rootEl.value || ['empty', 'loading'].includes(status)) return\n\n      previousScrollSize = getScrollSize()\n      setStatus(side, 'loading')\n\n      function done (status: InfiniteScrollStatus) {\n        setStatus(side, status)\n\n        nextTick(() => {\n          if (status === 'empty' || status === 'error') return\n\n          if (status === 'ok' && side === 'start') {\n            setScrollAmount(getScrollSize() - previousScrollSize + getScrollAmount())\n          }\n          if (props.mode !== 'manual') {\n            nextTick(() => {\n              window.requestAnimationFrame(() => {\n                window.requestAnimationFrame(() => {\n                  window.requestAnimationFrame(() => {\n                    intersecting(side)\n                  })\n                })\n              })\n            })\n          }\n        })\n      }\n\n      emit('load', { side, done })\n    }\n\n    const { t } = useLocale()\n\n    function renderSide (side: InfiniteScrollSide, status: InfiniteScrollStatus) {\n      if (props.side !== side && props.side !== 'both') return\n\n      const onClick = () => intersecting(side)\n      const slotProps = { side, props: { onClick, color: props.color } }\n\n      if (status === 'error') return slots.error?.(slotProps)\n\n      if (status === 'empty') return slots.empty?.(slotProps) ?? <div>{ t(props.emptyText) }</div>\n\n      if (props.mode === 'manual') {\n        if (status === 'loading') {\n          return slots.loading?.(slotProps) ?? (\n            <VProgressCircular indeterminate color={ props.color } />\n          )\n        }\n\n        return slots['load-more']?.(slotProps) ?? (\n          <VBtn variant=\"outlined\" color={ props.color } onClick={ onClick }>\n            { t(props.loadMoreText) }\n          </VBtn>\n        )\n      }\n\n      return slots.loading?.(slotProps) ?? (\n        <VProgressCircular indeterminate color={ props.color } />\n      )\n    }\n\n    const { dimensionStyles } = useDimension(props)\n\n    useRender(() => {\n      const Tag = props.tag\n      const hasStartIntersect = props.side === 'start' || props.side === 'both'\n      const hasEndIntersect = props.side === 'end' || props.side === 'both'\n      const intersectMode = props.mode === 'intersect'\n\n      return (\n        <Tag\n          ref={ rootEl }\n          class={[\n            'v-infinite-scroll',\n            `v-infinite-scroll--${props.direction}`,\n            {\n              'v-infinite-scroll--start': hasStartIntersect,\n              'v-infinite-scroll--end': hasEndIntersect,\n            },\n          ]}\n          style={ dimensionStyles.value }\n        >\n          <div class=\"v-infinite-scroll__side\">\n            { renderSide('start', startStatus.value) }\n          </div>\n\n          { rootEl.value && hasStartIntersect && intersectMode && (\n            <VInfiniteScrollIntersect\n              key=\"start\"\n              side=\"start\"\n              onIntersect={ handleIntersect }\n              rootRef={ rootEl.value }\n              rootMargin={ margin.value }\n            />\n          )}\n\n          { slots.default?.() }\n\n          { rootEl.value && hasEndIntersect && intersectMode && (\n            <VInfiniteScrollIntersect\n              key=\"end\"\n              side=\"end\"\n              onIntersect={ handleIntersect }\n              rootRef={ rootEl.value }\n              rootMargin={ margin.value }\n            />\n          )}\n\n          <div class=\"v-infinite-scroll__side\">\n            { renderSide('end', endStatus.value) }\n          </div>\n        </Tag>\n      )\n    })\n  },\n})\n\nexport type VInfiniteScroll = InstanceType<typeof VInfiniteScroll>\n"],
  "mappings": "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",
  "names": ["makeVInfiniteScrollProps", "propsFactory", "color", "String", "direction", "type", "default", "validator", "v", "includes", "side", "mode", "margin", "Number", "loadMoreText", "emptyText", "makeDimensionProps", "makeTagProps", "VInfiniteScrollIntersect", "defineComponent", "name", "props", "required", "rootRef", "rootMargin", "emits", "intersect", "isIntersecting", "setup", "_ref", "emit", "intersectionRef", "useIntersectionObserver", "entries", "undefined", "watch", "val", "useRender", "_createVNode", "_createTextVNode", "VInfiniteScroll", "genericComponent", "load", "options", "_ref2", "slots", "rootEl", "ref", "startStatus", "shallowRef", "endStatus", "computed", "convertToUnit", "setScrollAmount", "amount", "value", "property", "getScrollAmount", "getScrollSize", "getContainerSize", "onMounted", "setStatus", "status", "getStatus", "previousScrollSize", "handleIntersect", "_isIntersecting", "intersecting", "done", "nextTick", "window", "requestAnimationFrame", "t", "useLocale", "renderSide", "onClick", "slotProps", "error", "empty", "loading", "VProgressCircular", "VBtn", "dimensionStyles", "useDimension", "Tag", "tag", "hasStartIntersect", "hasEndIntersect", "intersectMode"]
}
